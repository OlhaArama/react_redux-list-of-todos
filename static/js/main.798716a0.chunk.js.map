{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","api.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","status","query","initialState","all","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","useDispatch","useAppSelector","useSelector","TodoItem","dispatch","className","id","completed","cn","title","onClick","currentTodoActions","TodoList","getFilteredTodos","useCallback","filteredTodos","active","lowerCaseTitle","toLowerCase","lowerCaseQuery","includes","useMemo","length","map","TodoFilter","filterByQuery","option","filterActions","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","result","finally","href","email","name","App","TodosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.798716a0.chunk.js","sourcesContent":["export enum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype FilterByStatusAction = {\n  type: 'filter/BY_STATUS';\n  payload: Status;\n};\n\ntype FilterByQueryAction = {\n  type: 'filter/BY_QUERY';\n  payload: string;\n};\n\nconst filterByStatus = (status: Status): FilterByStatusAction => ({\n  type: 'filter/BY_STATUS',\n  payload: status,\n});\n\nconst filterByQuery = (query: string): FilterByQueryAction => ({\n  type: 'filter/BY_QUERY',\n  payload: query,\n});\n\nexport const actions = { filterByStatus, filterByQuery };\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\ntype Action = FilterByStatusAction | FilterByQueryAction;\n\nconst initialState = {\n  query: '',\n  status: Status.all,\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/BY_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/BY_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: SetTodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const selectTodo = (selectedTodo: Todo) => {\n    dispatch(currentTodoActions.setTodo(selectedTodo));\n  };\n\n  return (\n    <tr data-cy=\"todo\">\n      <td className=\"is-vcentered\">{todo.id}</td>\n      {!todo.completed\n        ? <td className=\"is-vcentered\" />\n        : (\n          <td className=\"is-vcentered\">\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </td>\n        )}\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={cn({\n            'has-text-danger': !todo.completed,\n            'has-text-success': todo.completed,\n          })}\n        >\n          {todo.title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => selectTodo(todo)}\n        >\n          <span className=\"icon\">\n            {currentTodo?.id === todo.id\n              ? <i className=\"far fa-eye-slash\" />\n              : <i className=\"far fa-eye\" />}\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useCallback, useMemo } from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const {\n    query,\n    status,\n  } = useAppSelector<{ query: string, status: Status }>(state => state.filter);\n\n  const getFilteredTodos = useCallback(() => {\n    let filteredTodos = todos;\n\n    switch (status) {\n      case Status.active:\n        filteredTodos = todos.filter(todo => !todo.completed);\n        break;\n\n      case Status.completed:\n        filteredTodos = todos.filter(todo => todo.completed);\n        break;\n\n      case Status.all:\n      default:\n        filteredTodos = todos;\n    }\n\n    return filteredTodos.filter(todo => {\n      const lowerCaseTitle = todo.title.toLowerCase();\n      const lowerCaseQuery = query.toLowerCase();\n\n      return lowerCaseTitle.includes(lowerCaseQuery);\n    });\n  }, [todos, status, query]);\n\n  const filteredTodos = useMemo(getFilteredTodos, [todos, status, query]);\n\n  return (\n    <>\n      {!filteredTodos.length && query\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {filteredTodos.map(todo => (\n                <TodoItem key={todo.id} todo={todo} />\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const filterByStatus = (option: Status) => {\n    dispatch(filterActions.filterByStatus(option));\n  };\n\n  const filterByQuery = (option: string) => {\n    dispatch(filterActions.filterByQuery(option));\n  };\n\n  const handleChangeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    filterByStatus(event.target.value as Status);\n  };\n\n  const handleSearchTodo = (event: React.ChangeEvent<HTMLInputElement>) => {\n    filterByQuery(event.target.value);\n  };\n\n  const handleClearInput = () => {\n    filterByQuery('');\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleChangeStatus}\n          >\n            <option value={Status.all}>All</option>\n            <option value={Status.active}>Active</option>\n            <option value={Status.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleSearchTodo}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearInput}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const removeTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(result => {\n          setUser(result);\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {currentTodo && `Todo #${currentTodo.id}`}\n            </div>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo && currentTodo.title}\n            </p>\n\n            {user && currentTodo && (\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n                {' by '}\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useDispatch } from 'react-redux';\nimport { getTodos } from './api';\nimport { useAppSelector } from './app/hooks';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { actions as TodosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const setTodos = (currentTodos: Todo[]) => dispatch(TodosActions.setTodos(currentTodos));\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(result => {\n        setTodos(result);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}